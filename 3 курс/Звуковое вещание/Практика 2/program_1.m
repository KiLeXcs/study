% Частота дискретизации, Гц
fs = 48000;
% Период дискретизации, сек
Ts = 1/fs;
% Длительность звукового сигнала в секундах
T = 1;
% Длительность звукового сигнала в отсчетах
R = T * fs;

% Формирование массива, содержащего последовательность отсчетов времени в секундах
Mas = 0:Ts:T-Ts;

% Амплитуда и частота синусоидального сигнала
a = 1;
F = 1000;

% Формирование массива, содержащего отсчеты синусоидального сигнала
y = a * sin(2 * pi * F * Mas);

% Параметры сигнала скользящего тона
f0 = 0; % Начальная частота
f1 = 100; % Конечная частота
t1 = 1; % Длительность сигнала скользящего тона в секундах

% Формирование массива, содержащего отсчеты сигнала скользящего тона
q = chirp(Mas, f0, t1, f1);

% Формирование сигнала белого шума
w = randn(1, R);

% Длина БПФ
N = 1024;

% Вычисление БПФ для синусоидального сигнала
Y = fft(y, N);
% Выделение амплитуд спектральных составляющих
W = abs(Y(1:N/2)) / (N/2);
% Расчет значений амплитуд спектральных составляющих в dB
WdB = 20 * log10(W);

% Формирование массива оконной функции
win = bartlett(N).';
% Умножение массива win на y с дополнением до длины N
xbat = win .* [y(1:min(N, end)), zeros(1, N - length(y))];

% Формирование массива значений отсчета частоты
f = (0:N/2-1) * fs / N;

% График зависимостей значений спектральных составляющих БПФ
figure;
hold on;
semilogx(f, W);
title("Зависимость значений спектральных составляющих БПФ");
axis([10^(0) 10^(3) -60 0]);
xlabel("Частота (Гц)");
ylabel("Амплитуда спектральных составляющих (дБ)");
grid on;

% Длина последовательности звукового сигнала
M = R;

% Расчет целого числа выборок и длины
L = floor(M / N);
Ml = L * N;

% Сформирование новой последовательности звукового сигнала
if length(Mas) >= 1 && length(Mas) <= M
    xl = y; % Используем y
else
    xl = zeros(1, M); % Создаем массив нулей
end

% Расчет линейных значений амплитуд многократного спектра
xlu = zeros(L, N);
for i = 1:L
    u = bartlett(N).'; % Создаем окно
    xlu(i, :) = xl((i-1)*N + 1:i*N) .* u; % Применяем окно к сегменту
end

% Расчет текущего спектра
St = zeros(1, L);
for j = 1:L
    Sl = xlu(j, :);
    St(j) = mean(abs(Sl)); % Берем среднее значение
end

% Расчет энергетического спектра
Srms = zeros(1, L);
for o = 1:L
    Sl = xlu(o, :);
    Srms(o) = sqrt(mean(Sl.^2)); % RMS
end

% Расчет текущего и энергетического спектра в dB
StdBSF = 20 * log10(St);
SrmsdBFS = 20 * log10(Srms);

% Графическое окно и оси для спектрограммы
figure;
hold on;
% Спектрограмма звукового сигнала
specgram(y, N, fs);
title("Спектрограмма звукового сигнала");
colormap jet; % Установка цветовой карты
colorbar;
axis([0 T 0 fs/2]); % Изменено для лучшей визуализации
xlabel("Время (с)");
ylabel("Частота (Гц)");
grid on;

% Уведомление о завершении
disp('Анализ сигнала завершен.');

