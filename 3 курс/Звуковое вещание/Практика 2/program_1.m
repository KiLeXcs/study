% Частота дискретизации, Гц
fs = 48000;
% Период дискретизации, сек
Ts = 1/fs;
% Длительность звукового сигнала в секундах
T = 1;
% Длительность звукового сигнала в отсчетах
R = T * fs;
% Формирование массива, содержащего последовательность отсчетов времени в секундах
Mas = 0:Ts:T-Ts;
% Амплитуда синусоидального сигнала
a = 1;
% Частота синусоидального сигнала
F = 1000;
% Формирование массива, содержащего отсчеты синусоидального сигнала
y = a * sin(2 * pi * F * Mas);
% Формирование начальной и конечной частоты для сигнала скользящего тона
f0 = 0;
f1 = 100;
% Длительность сигнала скользящего тона в секундах
t1 = 1;
% Формирование массива, содержащего отсчеты сигнала скользящего тона
q = chirp(Mas, f0, t1, f1);
% Формирование сигнала белого шума
w = randn(1, R);
% Длина БПФ
N = 1024;
% Вычисление БПФ для синусоидального сигнала
Y = fft(y, N);
% Выделение амплитуд спектральных составляющих
W = abs(Y(1:N/2)) / (N/2);
% Расчет значений амплитуд спектральных составляющих в dBSF
WdB = 20 * log10(W);
% Формирование массива оконной функции
win = bartlett(N).';
% Умножение массива win на y
xbat = win .* [y(1:min(N, end)), zeros(1, N - length(y))]; % Убедитесь, что xbat имеет длину N
% Формирование массива значений отсчета частоты
f = (0:N/2-1) * fs / N;
% Формирование графического окна и координатных осей
figure;
hold on;
% График зависмости значений спектральных составляющих БПФ
semilogx(f, W);
title("Зависимость значений спектральных составляющих БПФ");
axis([10^(0) 10^(3) -60 0]);
xlabel("Отсчет частоты (Гц)");
ylabel("Амплитуда спектральных составляющих (дБ)");
grid on;
% Длина последовательности звукового сигнала
M = R; % изменено на R, так как мы использовали его выше
% Расчет целого числа выборок и длины
L = floor(M / N);
Ml = L * N;
% Сформирование новой последовательности звукового сигнала
if length(Mas) >= 1 && length(Mas) <= M
    xl = y; % если Mas достаточно длины, тогда используем y
else
    xl = zeros(1, M); % иначе создаем массив нулей
end
% Расчет линейных значений амплитуд многократного спектра
xlu = zeros(L, N);
for i = 1:L
    u = bartlett(N).'; % Создаем окно
    xlu(i, :) = xl((i-1)*N + 1:i*N) .* u; % Применяем окно к сегменту
end
% Расчет текущего спектра
St = zeros(1, L);
for j = 1:L
    Sl = xlu(j, :);
    St(j) = mean(abs(Sl)); % Упрощение: берем среднее значение
end
% Расчет энергетического спектра
Srms = zeros(1, L);
for o = 1:L
    Sl = xlu(o, :);
    Srms(o) = sqrt(mean(Sl.^2)); % RMS
end
% Расчет текущего и энергетического спектра в dBSF
StdBSF = 20 * log10(St);
SrmsdBFS = 20 * log10(Srms);
% Формирование графического окна и координатных осей для спектрограммы
figure;
hold on;
% Спектрограмма звукового сигнала
specgram(y, N, fs);
title("Спектрограмма звукового сигнала");
colormap jet; % Установка цветовой карты для большей наглядности
colorbar;
axis([0 1 0 fs/2]); % Изменено для лучшей визуализации
xlabel("Время (с)");
ylabel("Частота (Гц)");
grid on;
% Уведомление о завершении
disp('Анализ сигнала завершен.');

