clc
clear
close all
pkg load signal

% шрифт и его размер ГОСТ для графиков
set(0, "defaultaxesfontsize", 14)
set(0, "defaultaxesfontname", "Times New Roman")

% Шаг 1: Расчет номера варианта задания m

% а) Запись даты рождения в переменную
birthdate = '2004-11-21';

% б) Преобразование даты рождения в номер даты
date_number = datenum(birthdate);

% в) Нахождение остатка от деления на 50
itog = mod(date_number, 50);

% г) Прибавление 1 к полученному значению
m = itog + 1;

fs = 48000;
Ts = 1/fs;
T = 60;
N = T * fs;
t = 0:Ts:T-Ts;

[y1,fs1] = audioread("1.wav");
[y2,fs2] = audioread("2.wav");
[y3,fs3] = audioread("3.wav");


%Для спокойного голоса
% Цикл для разных значений длины БПФ Nwin (прямоугольное окно):
for Nwin = [128, 16384];
Nwin
% Половина длины БПФ:
Nwin2 = Nwin/2;
% Первый и последний отсчеты выборки:
n1 = 1;
n2 = n1 + Nwin - 1;
% Формирование массива амплитудных значений оконной функции
% и выполнение операции транспонирования вектора:
win = hanning(Nwin).';
% Расчет текущего и энергетического спектров звукового сигнала:
% Длительность сигнала в отсчетах:
M = size(y1,1);
% Целое число выборок L:
L = ceil(M/Nwin);
% Длина новой последовательности:
ML = L*Nwin;
% Новая последовательность отсчетов звукового сигнала:
xL = [rot90(y1(1:M)),zeros(1,ML-M)];
% Задание матрицы для всех последовательных выборок:
SWindowed = [];
% Расчет линейных значений амплитуд мгновенного спектра:
for i = [1:L];
% Применение окна к каждой последовательной выборке:
Lwindowed = xL(Nwin*(i-1)+1:Nwin*i).*win;
% Расчет БПФ для каждой последовательной выборки:
LWindowed = fft(Lwindowed,Nwin);
% Выделение первых N/2 отсчетов из каждой выборки:
LWindowed2 = LWindowed(1:Nwin2);
% Выделение амплитуд спектральных составляющих и
% масштабирование значений АЧХ каждой выборки:
SWin = abs(LWindowed2/Nwin2);
% Формирование матрицы, строки которой соответствуют
% значениям амплитуд мгновенного спектра
% каждой выборки:
SWindowed = [SWindowed;SWin];
endfor
% Расчет текущего спектра как среднего арифметического:
ST = sum(SWindowed)/L;
% Расчет энергетического спектра как среднеквадратичного:
SRMS = sqrt(sum(SWindowed.^2)/L);
% Расчет значений амплитуд спектральных составляющих в dBFS:
STdB = 20*log10(ST);
SRMSdB = 20*log10(SRMS);
% Формирование вектора значений отсчетов частоты:
fspect = [0:fs1/Nwin:(Nwin2-1)*fs1/Nwin];
% Вывод графиков:
% Мгновенный спектр для момента 2T/3:
figure("name","Спектр амплитуд (dBFS)","numbertitle","off");
subplot(2,1,1);
plot(fspect,20*log10(SWindowed(ceil(2*L/3),:)),"r");
ylabel("dBFS");
xlabel("f, Hz");
legend("Мгновенный(f)");
grid on;
% Текущий и энергетический спектры:
subplot(2,1,2);
semilogx([1,fspect(2:Nwin2)],STdB,"y");
hold on;
semilogx([1,fspect(2:Nwin2)],SRMSdB,"k");
ylabel("dBFS");
xlabel("f, Hz");
legend("Текуший(f)","Энергетический(f)");
grid on;
% Расчет и пострение спектрограммы для отрезка
% звукового сигнала в 20 с:
figure("name","Спектрограмма сигнала","numbertitle","off");
specgram(y1(1:960000),Nwin,fs1,hanning(Nwin),0);
colormap(jet);
colorbar("EastOutside");
disp("Press space bar to continue");
pause;
endfor


%для шепота
for Nwin = [128, 16384];
Nwin
% Половина длины БПФ:
Nwin2 = Nwin/2;
% Первый и последний отсчеты выборки:
n1 = 1;
n2 = n1 + Nwin - 1;
% Формирование массива амплитудных значений оконной функции
% и выполнение операции транспонирования вектора:
win = hanning(Nwin).';
% Расчет текущего и энергетического спектров звукового сигнала:
% Длительность сигнала в отсчетах:
M = size(y2,1);
% Целое число выборок L:
L = ceil(M/Nwin);
% Длина новой последовательности:
ML = L*Nwin;
% Новая последовательность отсчетов звукового сигнала:
xL = [rot90(y2(1:M)),zeros(1,ML-M)];
% Задание матрицы для всех последовательных выборок:
SWindowed = [];
% Расчет линейных значений амплитуд мгновенного спектра:
for i = [1:L];
% Применение окна к каждой последовательной выборке:
Lwindowed = xL(Nwin*(i-1)+1:Nwin*i).*win;
% Расчет БПФ для каждой последовательной выборки:
LWindowed = fft(Lwindowed,Nwin);
% Выделение первых N/2 отсчетов из каждой выборки:
LWindowed2 = LWindowed(1:Nwin2);
% Выделение амплитуд спектральных составляющих и
% масштабирование значений АЧХ каждой выборки:
SWin = abs(LWindowed2/Nwin2);
% Формирование матрицы, строки которой соответствуют
% значениям амплитуд мгновенного спектра
% каждой выборки:
SWindowed = [SWindowed;SWin];
endfor
% Расчет текущего спектра как среднего арифметического:
ST = sum(SWindowed)/L;
% Расчет энергетического спектра как среднеквадратичного:
SRMS = sqrt(sum(SWindowed.^2)/L);
% Расчет значений амплитуд спектральных составляющих в dBFS:
STdB = 20*log10(ST);
SRMSdB = 20*log10(SRMS);
% Формирование вектора значений отсчетов частоты:
fspect = [0:fs2/Nwin:(Nwin2-1)*fs2/Nwin];
% Вывод графиков:
% Мгновенный спектр для момента 2T/3:
figure("name","Спектр амплитуд (dBFS)","numbertitle","off");
subplot(2,1,1);
plot(fspect,20*log10(SWindowed(ceil(2*L/3),:)),"r");
ylabel("dBFS");
xlabel("f, Hz");
legend("Мгновенный(f)");
grid on;
% Текущий и энергетический спектры:
subplot(2,1,2);
semilogx([1,fspect(2:Nwin2)],STdB,"y");
hold on;
semilogx([1,fspect(2:Nwin2)],SRMSdB,"k");
ylabel("dBFS");
xlabel("f, Hz");
legend("Текущий(f)","Энергетический(f)");
grid on;
% Расчет и пострение спектрограммы для отрезка
% звукового сигнала в 20 с:
figure("name","Спектограмма сигнала","numbertitle","off");
specgram(y2(1:960000),Nwin,fs2,hanning(Nwin),0);
colormap(jet);
colorbar("EastOutside");
disp("Press space bar to continue");
pause;
endfor


%Для эмоционального голомса
for Nwin = [128, 16384];
Nwin
% Половина длины БПФ:
Nwin2 = Nwin/2;
% Первый и последний отсчеты выборки:
n1 = 1;
n2 = n1 + Nwin - 1;
% Формирование массива амплитудных значений оконной функции
% и выполнение операции транспонирования вектора:
win = hanning(Nwin).';
% Расчет текущего и энергетического спектров звукового сигнала:
% Длительность сигнала в отсчетах:
M = size(y3,1);
% Целое число выборок L:
L = ceil(M/Nwin);
% Длина новой последовательности:
ML = L*Nwin;
% Новая последовательность отсчетов звукового сигнала:
xL = [rot90(y3(1:M)),zeros(1,ML-M)];
% Задание матрицы для всех последовательных выборок:
SWindowed = [];
% Расчет линейных значений амплитуд мгновенного спектра:
for i = [1:L];
% Применение окна к каждой последовательной выборке:
Lwindowed = xL(Nwin*(i-1)+1:Nwin*i).*win;
% Расчет БПФ для каждой последовательной выборки:
LWindowed = fft(Lwindowed,Nwin);
% Выделение первых N/2 отсчетов из каждой выборки:
LWindowed2 = LWindowed(1:Nwin2);
% Выделение амплитуд спектральных составляющих и
% масштабирование значений АЧХ каждой выборки:
SWin = abs(LWindowed2/Nwin2);
% Формирование матрицы, строки которой соответствуют
% значениям амплитуд мгновенного спектра
% каждой выборки:
SWindowed = [SWindowed;SWin];
endfor
% Расчет текущего спектра как среднего арифметического:
ST = sum(SWindowed)/L;
% Расчет энергетического спектра как среднеквадратичного:
SRMS = sqrt(sum(SWindowed.^2)/L);
% Расчет значений амплитуд спектральных составляющих в dBFS:
STdB = 20*log10(ST);
SRMSdB = 20*log10(SRMS);
% Формирование вектора значений отсчетов частоты:
fspect = [0:fs3/Nwin:(Nwin2-1)*fs3/Nwin];
% Вывод графиков:
% Мгновенный спектр для момента 2T/3:
figure("name","Спектр амплитуды (dBFS)","numbertitle","off");
subplot(2,1,1);
plot(fspect,20*log10(SWindowed(ceil(2*L/3),:)),"r");
ylabel("dBFS");
xlabel("f, Hz");
legend("Мгновенный(f)");
grid on;
% Текущий и энергетический спектры:
subplot(2,1,2);
semilogx([1,fspect(2:Nwin2)],STdB,"y");
hold on;
semilogx([1,fspect(2:Nwin2)],SRMSdB,"k");
ylabel("dBFS");
xlabel("f, Hz");
legend("Текущий(f)","Энергетический(f)");
grid on;
% Расчет и пострение спектрограммы для отрезка
% звукового сигнала в 20 с:
figure("name","Спектограмма сигнала","numbertitle","off");
specgram(y3(1:960000),Nwin,fs3,hanning(Nwin),0);
colormap(jet);
colorbar("EastOutside");
disp("Press space bar to continue");
pause;
endfor
